# Spotify Taste Comparison App Integration Guide

This guide will help you integrate the new multi-user Spotify comparison functionality into your existing app. The integration includes both backend (Flask) and frontend (React) components.

## Overview

The main changes include:
1. Updated Flask backend to support multiple user logins and comparison
2. New React components for the comparison page
3. Improved user interface with Chakra UI

## Backend Integration Steps

1. **Replace `routes.py` with the new version**
   - The new routes file includes all the functions from `orlandov2.py` with additional API endpoints for multi-user support

2. **Update `app.py`**
   - Replace your current `app.py` with the provided version
   - This includes updated session handling and new endpoints for two-user login flow

3. **Environment Variables**
   - Ensure your `.env` file contains the correct Spotify API credentials:
     ```
     CLIENT_ID='your_spotify_client_id'
     CLIENT_SECRET='your_spotify_client_secret'
     REDIRECT_URI='http://localhost:5000/callback'
     ```

## Frontend Integration Steps

1. **Add New Components**
   - `ComparisonPage.jsx` - Main component for displaying comparison results
   - `Navbar.jsx` - Navigation component
   - Updated `App.jsx` - Main application component with routing

2. **Update main.jsx**
   - Replace with the provided `main.jsx` file

3. **Install Missing Dependencies (if needed)**
   ```bash
   cd Frontend
   npm install @chakra-ui/react @emotion/react @emotion/styled framer-motion
   ```

## Testing the Integration

1. **Start the Backend**
   ```bash
   cd Backend
   python app.py
   ```

2. **Start the Frontend**
   ```bash
   cd Frontend
   npm run dev
   ```

3. **Test the Flow**
   - Open your browser to `http://localhost:3000`
   - You should see the login page
   - Login with the first Spotify account
   - You'll be redirected to the comparison page showing you need Player 2
   - Click "Login with Spotify" for Player 2
   - After both players are logged in, the comparison will be generated automatically

## How the Comparison Works

The comparison is calculated using several metrics:
1. **Top Songs Similarity** - How many songs both users have in common
2. **Genre Similarity** - How similar the genres are between users
3. **Era Similarity** - How similar the musical eras (decades) are between users
4. **Overall Score** - Weighted average of all metrics

The comparison shows results for three time ranges:
- Short term (approximately 4 weeks)
- Medium term (approximately 6 months)
- Long term (several years)

## Troubleshooting

- **Authentication Issues**: Make sure your Spotify Developer App has the correct redirect URI: `http://localhost:5000/callback`
- **API Errors**: Check the Flask console for detailed error messages
- **Frontend Issues**: Check the browser console for React errors
- **Session Problems**: Clear your browser cookies and localStorage if you encounter persistent session issues

## Additional Customization

You can further customize this integration by:
1. Modifying the weighting in the `produceV2results` function to prioritize different metrics
2. Adding more visualizations in the ComparisonPage component
3. Extending the comparison to include additional Spotify data like playlists or saved tracks